//315CA-Gilma Sebastian Mihai

main.c
    In fisierul main am o citire in mod repetat a unui string si verificarea
acestuia pe ce caz trebuie sa fie.In caz ca ajungem pe cazul "select" si 
acesta este invalidat se ramane la selectia precedenta.In cazul "apply" se
verifica daca exista vreun parametru dupa.
    In final se elibereaza memoria ramasa.

load.c
    Acest fisier are rolul de a incarca imaginea in memorie astfel noi citim
datele si le stocam in memorie cu ajutorul functiilor : "read_P2", "read_P3"
"read_P5", "read_P6".In caz ca citim un fisier binar vom lua byte cu byte din
memorie.In cazul unui fisier text extragerea se va face ca o matrice normala.
In caz ca functia load a mai fost apelata se sterge memoria veche ramasa
si se creeaza o matrice noua.

rotate1.c
    In rotate se stabileste daca operatia este posibila, apoi stabilim tipul
operatiei care trebuie efectuata asupra matricei.In caz ca selectam toata
matricea pentru rotate aceasta poaste nu fie patratica deci vom creea o alta
matrice de dimensiuni inverse fata de cea initiala.Aceste proces este facut
prin transpunerea matricei principale in matrice copie si inversarea primei
coloane cu ultima , coloanei a doua cu penultima si asa mai departe.

select.c
    In aceasta functie se citeste cu fgets sirul de caractere primit se
verifica daca acesta este valid, adica contine 4 numere pentru a putea fii
efectuat sau stringul "ALL".In caz contrar se invalideaza.Dupa aceea se extrag
numerele din string cu ajutorul functiei atoi si se verifica daca corespund
conditiilor.

save.c
    Acest fisier contine functia de save.Aceasta verifica tipul de date primit
salveaza in fisierul destinate datele salvand informatia in cazul binar
byte cu byte.La inceput extrage numele fisierului destinatie si verifica
daca apare si stringul ascii pentru a stii daca salveaza text sau binar.

histogram.c
    In acest fisier este functia histogram care primeste un string cu fgets
apoi prelucreaza stringul si extrage numerele primite cu "atoi" apoi creeam
un vector de aparitii aflam maximul din vectorul de aparitii.Vedem pe cate
binuri trebuie facut astfel in cat micim vectorul cu numarul obtinut din
impartirea lui y la 256.Pe urma aflam maximul din vectorul obtinut si
calculam numarul de stele cu formula din enunt.

apply.c
    Fisierul apply.c are doua functii prima care prelucreaza datele de intrare
astfel ne trimite catre functia care are ca rol aplicarea filtrului.
    In functiile de aplicare a filtrului se aplica doar pe elementele care nu
sunt situate pe margine dupa aplicarea filtrului se ajusteaza valorile pentru
a se incadra in maximul permis si in minim.Toate aceste operatii au loc intr-o
matrice copie si aceasta la final se inlocuieste cu cea principala.

crop.c
    In fisierul crop.c se creeaza o copie din matricea initiala de la
coordonatele cerute si se inlocuieste cu matricea principala.Matricea initiala
se elibereaza din memorie si adresa ei este in locuita cu adresa copiei.
In final se inlocuiesc indicii cu cei actuali.

equalizer.c
    In acest fisier se creeaza un vector de aparitii dupa care se calculeaza
suma tuturor elementelor din vectorul de aparitii mai mici decat pixelul nostru
apoi se face un calcul (255 / aria) (imaginii) * suma (suma calculata mai sus),
apoi acest rezultat este pus in locul pixelului.
